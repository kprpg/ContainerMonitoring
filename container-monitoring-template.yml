jobs:
- job: Deploy
  displayName: Deploy Container Monitoring
  pool: 
    vmImage: ubuntu-latest
  
  variables:
  - template: container-monitoring-variables.yml
  
  steps:
  - checkout: self

  - task: AzureKeyVault@1
    displayName: Load Secrets
    inputs:
      azureSubscription: '$(stagingSubscriptionEndpoint)'
      KeyVaultName: '$(stagingKeyVaultName)'
      SecretsFilter: 'ContosoSH360ClusterSPClientId, ContosoSH360ClusterSPClientSecret, ContosoSH360ClusterSPObjectId'

  - task: AzurePowerShell@4
    displayName: 'Create resource groups'
    inputs:
      azurePowerShellVersion: LatestVersion
      azureSubscription:  $(azureSubscriptionEndpoint)
      ScriptType: InlineScript
      Inline: |
        New-AzDeployment -Location '$(location)' -TemplateFile '$(ContosoSH360ClusterFolder)/arm/resourcegroups.json' -TemplateParameterObject @{
          resourceGroupLocation = '$(location)'
          resourceGroupName = @('$(resourceGroupName)', '$(workspaceResourceGroupName)')
        } -Verbose

  - task: AzurePowerShell@4
    displayName: 'Deploy log analytics workspace'
    inputs:
      azurePowerShellVersion: LatestVersion
      azureSubscription:  $(azureSubscriptionEndpoint)
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroupDeployment -ResourceGroupName '$(workspaceResourceGroupName)' -TemplateFile '$(ContosoSH360ClusterFolder)/arm/workspace.json' -TemplateParameterObject @{
          location = '$(location)'
          workspaceName = "$(workspaceName)"
        } -Verbose

  - task: AzurePowerShell@4
    displayName: 'Deploy saved searches'
    inputs:
      azurePowerShellVersion: LatestVersion
      azureSubscription:  $(azureSubscriptionEndpoint)
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroupDeployment -ResourceGroupName '$(workspaceResourceGroupName)' -TemplateFile '$(ContosoSH360ClusterFolder)/arm/workspace.savedSearches.json' -TemplateParameterObject @{
          workspaceName = "$(workspaceName)"
        } -Verbose


  - task: AzurePowerShell@4
    displayName: 'Deploy AKS'
    inputs:
      azurePowerShellVersion: LatestVersion
      azureSubscription:  $(azureSubscriptionEndpoint)
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroupDeployment -ResourceGroupName '$(resourceGroupName)' -TemplateFile '$(ContosoSH360ClusterFolder)/arm/deploy_aks.json' -TemplateParameterObject @{
          location = '$(location)'
          servicePrincipalClientId = "$(ContosoSH360ClusterSPClientId)"
          servicePrincipalClientSecret = "$(ContosoSH360ClusterSPClientSecret)"
          clusterName = "$(AKSName)"
          workspaceName = "$(workspaceName)"
          workspaceResourceGroupName = "$(workspaceResourceGroupName)"
        } -Verbose

  - task: AzureCLI@2
    displayName: 'Enable MDM'
    #condition: false
    inputs:
      azureSubscription: $(azureSubscriptionEndpoint)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $cluster = az aks show -g '$(resourceGroupName)' -n '$(AKSName)' --output json
        $clusterData = $cluster | ConvertFrom-Json
        az role assignment create --assignee-object-id "$(ContosoSH360ClusterSPObjectId)" --scope $clusterData.id --role "Monitoring Metrics Publisher"

  - task: AzurePowerShell@4
    displayName: 'Deploy Non Monitored AKS'
    #enabled: false
    inputs:
      azurePowerShellVersion: LatestVersion
      azureSubscription:  $(azureSubscriptionEndpoint)
      ScriptType: InlineScript
      Inline: |
        New-AzResourceGroupDeployment -ResourceGroupName '$(resourceGroupName)' -TemplateFile '$(ContosoSH360ClusterFolder)/arm/deploy_nonmonitored_aks.json' -TemplateParameterObject @{
          location = '$(location)'
          servicePrincipalClientId = "$(ContosoSH360ClusterSPClientId)"
          servicePrincipalClientSecret = "$(ContosoSH360ClusterSPClientSecret)"
          clusterName = "$(NonMonitoredAKSName)"
        } -Verbose

  - task: KubectlInstaller@0
    displayName: 'Install Kubectl latest'

  - task: Kubernetes@1
    displayName: 'kubectl apply invalidimage'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/invalidimage.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply ngnix-app'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/ngnix-app.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply minecraft-namespace'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/minecraft-namespace.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply minecraft3'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/minecraft3.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply minecraft3'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/ngnix-app.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply prometheus'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/prometheus.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply windows-service'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/windows-service.yaml'

  - task: Kubernetes@1
    displayName: 'kubectl apply prometheus-bundle'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureResourceGroup: '$(resourceGroupName)'
      kubernetesCluster: '$(AKSName)'
      command: apply
      arguments: '-f $(ContosoSH360ClusterFolder)/yaml/prometheus-bundle.yaml'