# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

trigger:
- none

parameters:
- name: environment
  displayName: 'Environment to deploy'
  type: string
  default: Integration
  values:
  - Integration
  - Production
  - PreProd

variables:
- ${{ if eq(parameters.environment, 'Integration') }}:
  - template: container-monitoring-integration.variables.yml
- ${{ if eq(parameters.environment, 'Production') }}:
  - template: container-monitoring-production.variables.yml
- ${{ if eq(parameters.environment, 'PreProd') }}:
  - template: container-monitoring-preprod.variables.yml


stages:
- stage: Deploy
  displayName: Deploy
  jobs:
  - job: Deploy
    displayName: Deploy Container Monitoring
    pool: 
      name: ServicesDevOps-contosohotelsdev
      demands:
       ImageOverride -eq MMSUbuntu21.04
    
    variables:
    - template: container-monitoring-variables.yml
    
    steps:
    - checkout: self

    - task: AzureKeyVault@1
      displayName: Load Secrets
      inputs:
        azureSubscription: '$(stagingSubscriptionEndpoint)'
        KeyVaultName: '$(stagingKeyVaultName)'
        SecretsFilter: 'ContosoSH360ClusterSPClientId, ContosoSH360ClusterSPClientSecret, ContosoSH360ClusterSPObjectId, chVmAdminPassword, chVmAdminUser '

    - task: AzurePowerShell@4
      displayName: 'Create resources'
      inputs:
        azurePowerShellVersion: LatestVersion
        azureSubscription:  $(azureSubscriptionEndpoint)
        ScriptType: InlineScript
        Inline: |
          $subscriptionId = (Get-AzContext).Subscription.Id
          New-AzSubscriptionDeployment -Name "cmResources_$(Build.BuildNumber)" -Location '$(location)' -TemplateFile '$(Build.SourcesDirectory)/main.bicep' -TemplateParameterObject @{
            subscriptionId = $subscriptionId
            location = '$(location)'
            prefix = '$(prefix)'
            contosoSH360ClusterResourceGroupName = '$(resourceGroupName)'
            opsResourceGroupName = '$(workspaceResourceGroupName)'
            logAnalyticsWorkspaceName = '$(workspaceName)'
            montioredClusterName = '$(AKSName)'
            nonMontioredClusterName = '$(NonMonitoredAKSName)'
            servicePrincipalClientId = '$(ContosoSH360ClusterSPClientId)'
            servicePrincipalClientSecret = '$(ContosoSH360ClusterSPClientSecret)'
            contosoSH360ClusterSPObjectId = '$(ContosoSH360ClusterSPObjectId)'
            adminUser = '$(chVmAdminUser)'
            adminPassword = '$(chVmAdminPassword)'
          } -Verbose

    - task: KubectlInstaller@0
      displayName: 'Install Kubectl latest'

    - task: Kubernetes@1
      displayName: 'kubectl apply invalidimage'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/invalidimage.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply ngnix-app'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/ngnix-app.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft-namespace'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/minecraft-namespace.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft3'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/minecraft3.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft3'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/ngnix-app.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply prometheus'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/prometheus.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply windows-service'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/windows-service.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply prometheus-bundle'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(AKSName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/yaml/prometheus-bundle.yaml'