# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

trigger:
- none

parameters:
- name: environment
  displayName: 'Environment to deploy'
  type: string
  default: Integration
  values:
  - Integration
  - PreProd
  - Production

- name: securityTest 
  displayName: 'Deploy Security Test stage'
  type: boolean 
  default: false

- name: Lint 
  displayName: 'Deploy Lint stage'
  type: boolean 
  default: false

- name: Validate 
  displayName: 'Deploy Validate stage'
  type: boolean 
  default: false

- name: Preview 
  displayName: 'Deploy preview stage'
  type: boolean 
  default: false 

- name: InfrastructureDeployment 
  displayName: 'Deploy Infrastructure stage'
  type: boolean 
  default: false

- name: ApplicationDeployment 
  displayName: 'Deploy Application stage'
  type: boolean 
  default: false 

- name: PrometheusDeployment
  displayName: 'Deploy Managed-Prometheus stage'
  type: boolean 
  default: false

- name: Prometheusstage 
  displayName: 'Prometheus deployment'
  type: string
  default: no
  values:
  - no
  - yes
  
- name: prefix
  displayName: 'Prefix'
  type: string

- name: clusterVersion
  displayName: 'AKS Cluster Version'
  type: string

variables:
- ${{ if eq(parameters.environment, 'Integration') }}:
  - template: container-monitoring-integration.variables.yml
- ${{ if eq(parameters.environment, 'Production') }}:
  - template: container-monitoring-production.variables.yml
- ${{ if eq(parameters.environment, 'PreProd') }}:
  - template: container-monitoring-preprod.variables.yml

- template: container-monitoring-variables.yml

- name: prefix
  value: ${{ parameters.prefix }}

stages:
- stage: SecurityTest
  displayName: Run Security Code Analysis scan
  condition: ${{ parameters.securityTest }}
  jobs:
  - job: SecurityCodeAnalysisScans
    displayName:  Run Security Code Analysis Scans
    pool:
      vmImage: windows-latest
    
    steps:
    - checkout: self

    - task: AntiMalware@3
      inputs:
        FileDirPath: '$(Build.SourcesDirectory)'
        EnableServices: true

    - task: CredScan@3
      inputs:
        toolMajorVersion: Latest
        scanFolder: '$(Build.SourcesDirectory)'

    - task: Armory@2
      inputs:
        targetDirectory: '$(Build.SourcesDirectory)'
        targetFiles: 'f|**\*.json;-|.gdn\**;'

    - task: SdtReport@2
      inputs:
        GdnExportSarifFile: false
        GdnExportHtmlFile: true
        GdnExportAllTools: true

    - task: PublishSecurityAnalysisLogs@3
      inputs:
        ArtifactName: 'CodeAnalysisLogs'
        ArtifactType: 'Container'
        AllTools: true
        ToolLogsNotFoundAction: 'Standard'

    - task: PostAnalysis@2
      displayName: 'Post Analysis'
      inputs:
        GdnBreakAllTools: true

- stage: Lint
  displayName: LintCode
  condition: ${{ parameters.Lint }}
  jobs:
  - job: LintCode
    displayName: Lint Code
    steps:
    - script: |
          az bicep build --file $(Build.SourcesDirectory)/bicep/main.bicep
      displayName: 'Run Bicep linter'
      
- stage: Validate
  displayName: Validate Bicep code
  condition: ${{ parameters.Validate }}
  jobs:
  - job: ValidateBicepCode
    displayName: Validate Bicep code
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Subscription'
        azureResourceManagerConnection: '$(azureSubscriptionEndpoint)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/bicep/main.bicep'
        deploymentMode: 'Validation'
        overrideParameters: >
          -location $(location)
          -prefix $(prefix)
          -contosoSH360ClusterResourceGroupName $(resourceGroupName)
          -opsResourceGroupName $(workspaceResourceGroupName)
          -logAnalyticsWorkspaceName $(workspaceName)
          -workspaceSkuName $(workspaceSkuName)
          -monitoredClusterName $(aksName)
          -nonmonitoredClusterName $(NonMonitoredAKSName)
          -adminUser $(chVmAdminUser)
          -adminPassword $(chVmAdminPassword)
          -agentVMSize $(agentVMSize)
          -retentionPeriod $(retentionPeriod)
          -serviceCidr $(aksClusterServiceCidr)
          -dockerBridgeCidr $(aksClusterDockerBridgeCidr)
          -managedIdentityName $(managedIdentityName)
          -searchTableName $(searchTableName)
          -monitoredAKSNetworkPolicy $(monitoredAKSNetworkPolicy)
          -monitoredAKSNetworkPlugin $(monitoredAKSNetworkPlugin)
          -nonMonitoredAKSNetworkPolicy $(nonMonitoredAKSNetworkPolicy)
          -nonMonitoredAKSNetworkPlugin $(nonMonitoredAKSNetworkPlugin)
          -kubernetesVersion ${{ parameters.clusterVersion }}
          -monitoredClustervnetName $(monitoredClustervnetName)
          -nonmonitoredClustervnetName $(nonmonitoredClustervnetName)
          -monitoredClustervnetAddressPrefix $(monitoredClustervnetAddressPrefix)
          -nonmonitoredClustervnetAddressPrefix $(nonmonitoredClustervnetAddressPrefix)
          -monitoredClustersubnetName $(monitoredClustersubnetName)
          -monitoredClustersubnetAddressPrefix $(monitoredClustersubnetAddressPrefix)
          -nonmonitoredClustersubnetName $(nonmonitoredClustersubnetName)
          -nonmonitoredClustersubnetAddressPrefix $(nonmonitoredClustersubnetAddressPrefix)

- stage: Preview
  displayName: Bicep Preview
  condition: ${{ parameters.Preview }}
  jobs: 
  - job: PreviewAzureChanges
    displayName: Preview Azure changes
    steps:
    - task: AzurePowerShell@4
      name: RunWhatIf
      displayName: Run what-if
      inputs:
        azurePowerShellVersion: LatestVersion
        azureSubscription:  $(azureSubscriptionEndpoint)
        ScriptType: InlineScript
        Inline: |
          $subscriptionId = (Get-AzContext).Subscription.Id
          New-AzSubscriptionDeployment -Whatif -Location '$(location)' -TemplateFile '$(Build.SourcesDirectory)/bicep/main.bicep' -TemplateParameterObject @{
            location = '$(location)'
            prefix = '$(prefix)'
            contosoSH360ClusterResourceGroupName = '$(resourceGroupName)'
            opsResourceGroupName = '$(workspaceResourceGroupName)'
            logAnalyticsWorkspaceName = '$(workspaceName)'
            workspaceSkuName = '$(workspaceSkuName)'
            monitoredClusterName = '$(aksName)'
            nonmonitoredClusterName = '$(NonMonitoredAKSName)'
            adminUser = '$(chVmAdminUser)'
            adminPassword = '$(chVmAdminPassword)'
            agentVMSize = '$(agentVMSize)'
            retentionPeriod = $(retentionPeriod)
            serviceCidr = '$(aksClusterServiceCidr)'
            dockerBridgeCidr = '$(aksClusterDockerBridgeCidr)'
            managedIdentityName = '$(managedIdentityName)'
            searchTableName = '$(searchTableName)'
            monitoredAKSNetworkPolicy = '$(monitoredAKSNetworkPolicy)'
            monitoredAKSNetworkPlugin = '$(monitoredAKSNetworkPlugin)'
            nonMonitoredAKSNetworkPolicy = '$(nonMonitoredAKSNetworkPolicy)'
            nonMonitoredAKSNetworkPlugin = '$(nonMonitoredAKSNetworkPlugin)'
            kubernetesVersion = '${{ parameters.clusterVersion }}'
            monitoredClustervnetName = '$(monitoredClustervnetName)'
            nonmonitoredClustervnetName = '$(nonmonitoredClustervnetName)'
            monitoredClustervnetAddressPrefix = '$(monitoredClustervnetAddressPrefix)'
            nonmonitoredClustervnetAddressPrefix = '$(nonmonitoredClustervnetAddressPrefix)'
            monitoredClustersubnetName = '$(monitoredClustersubnetName)'
            monitoredClustersubnetAddressPrefix = '$(monitoredClustersubnetAddressPrefix)'
            nonmonitoredClustersubnetName = '$(nonmonitoredClustersubnetName)'
            nonmonitoredClustersubnetAddressPrefix = '$(nonmonitoredClustersubnetAddressPrefix)'   
            azureMonitorWorkspaceName = '$(azureMonitorWorkspaceName)'  
            clusterResourceId  = '$(clusterResourceId)'  
            actionGroupResourceId  = '$(actionGroupResourceId)'
            azureMonitorWorkspaceLocation = '$(azureMonitorWorkspaceLocation)'
            azureMonitorWorkspaceResourceId  = '$(azureMonitorWorkspaceResourceId)'
            clusterLocation  = '$(clusterLocation)'
            grafanaLocation  = '$(grafanaLocation)'
            grafanaSku  = '$(grafanaSku)'
            metricAnnotationsAllowList   = '$(metricAnnotationsAllowList)'
            metricLabelsAllowlist  = '$(metricLabelsAllowlist)'
            aksName  = '$(aksName)'
            grafanaName  = '$(grafanaName)'
            groupShortName  = '$(groupShortName)'
            PrometheusactionGroup  = '$(PrometheusactionGroup)'
            Receiveremailactiongroups  = '$(Receiveremailactiongroups)'
            location  = '$(location)'
            contosoSH360ClusterResourceGroupName  = '$(contosoSH360ClusterResourceGroupName)'
            opsResourceGroupName  = '$(opsResourceGroupName)'
            variables_dcraName = '$(variables_dcraName)'
            variables_clusterName  = '$(variables_clusterName)'
            Prometheusstage        = '${{ parameters.Prometheusstage }}'
          } -Verbose
    

- stage: BicepDeploy
  displayName: Bicep Deployment
  condition: and( ${{ parameters.InfrastructureDeployment }},  in(dependencies.Preview.result, 'Succeeded') )
  jobs:
  - job: Deploy
    displayName: Deploy Container Monitoring
    pool: 
      vmImage: ubuntu-latest
    
    variables:
    - template: container-monitoring-variables.yml
    
    steps:
    - checkout: self

    - task: AzurePowerShell@4
      displayName: 'Create resources'
      inputs:
        azurePowerShellVersion: LatestVersion
        azureSubscription:  $(azureSubscriptionEndpoint)
        ScriptType: InlineScript
        Inline: |
          $subscriptionId = (Get-AzContext).Subscription.Id
          New-AzSubscriptionDeployment -Location '$(location)' -TemplateFile '$(Build.SourcesDirectory)/bicep/main.bicep' -TemplateParameterObject @{
            location = '$(location)'
            prefix = '$(prefix)'
            contosoSH360ClusterResourceGroupName = '$(resourceGroupName)'
            opsResourceGroupName = '$(workspaceResourceGroupName)'
            logAnalyticsWorkspaceName = '$(workspaceName)'
            workspaceSkuName = '$(workspaceSkuName)'
            monitoredClusterName = '$(aksName)'
            nonmonitoredClusterName = '$(NonMonitoredAKSName)'
            adminUser = '$(chVmAdminUser)'
            adminPassword = '$(chVmAdminPassword)'
            agentVMSize = '$(agentVMSize)'
            retentionPeriod = $(retentionPeriod)
            serviceCidr = '$(aksClusterServiceCidr)'
            dockerBridgeCidr = '$(aksClusterDockerBridgeCidr)'
            managedIdentityName = '$(managedIdentityName)'
            searchTableName = '$(searchTableName)'
            monitoredAKSNetworkPolicy = '$(monitoredAKSNetworkPolicy)'
            monitoredAKSNetworkPlugin = '$(monitoredAKSNetworkPlugin)'
            nonMonitoredAKSNetworkPolicy = '$(nonMonitoredAKSNetworkPolicy)'
            nonMonitoredAKSNetworkPlugin = '$(nonMonitoredAKSNetworkPlugin)'
            kubernetesVersion = '${{ parameters.clusterVersion }}'
            monitoredClustervnetName = '$(monitoredClustervnetName)'
            nonmonitoredClustervnetName = '$(nonmonitoredClustervnetName)'
            monitoredClustervnetAddressPrefix = '$(monitoredClustervnetAddressPrefix)'
            nonmonitoredClustervnetAddressPrefix = '$(nonmonitoredClustervnetAddressPrefix)'
            monitoredClustersubnetName = '$(monitoredClustersubnetName)'
            monitoredClustersubnetAddressPrefix = '$(monitoredClustersubnetAddressPrefix)'
            nonmonitoredClustersubnetName = '$(nonmonitoredClustersubnetName)'
            nonmonitoredClustersubnetAddressPrefix = '$(nonmonitoredClustersubnetAddressPrefix)'
            azureMonitorWorkspaceName = '$(azureMonitorWorkspaceName)'  
            clusterResourceId  = '$(clusterResourceId)'  
            actionGroupResourceId  = '$(actionGroupResourceId)'
            azureMonitorWorkspaceLocation = '$(azureMonitorWorkspaceLocation)'
            azureMonitorWorkspaceResourceId  = '$(azureMonitorWorkspaceResourceId)'
            clusterLocation  = '$(clusterLocation)'
            grafanaLocation  = '$(grafanaLocation)'
            grafanaSku  = '$(grafanaSku)'
            metricAnnotationsAllowList   = '$(metricAnnotationsAllowList)'
            metricLabelsAllowlist  = '$(metricLabelsAllowlist)'
            aksName  = '$(aksName)'
            grafanaName  = '$(grafanaName)'
            groupShortName  = '$(groupShortName)'
            PrometheusactionGroup  = '$(PrometheusactionGroup)'
            Receiveremailactiongroups  = '$(Receiveremailactiongroups)'
            location  = '$(location)'
            contosoSH360ClusterResourceGroupName  = '$(contosoSH360ClusterResourceGroupName)'
            opsResourceGroupName  = '$(opsResourceGroupName)'
            variables_dcraName = '$(variables_dcraName)'
            variables_clusterName  = '$(variables_clusterName)'
            Prometheusstage        = '${{ parameters.Prometheusstage }}'
          } -Verbose
    
    - task: AzurePowerShell@5
      displayName: Creation of dataCollectionRule
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        azurePowerShellVersion: LatestVersion
        ScriptType: 'InlineScript'
        Inline: |
            New-AzResourceGroupDeployment -ResourceGroupName '$(workspaceResourceGroupName)'  `
                -TemplateFile '$(Build.SourcesDirectory)/bicep/modules/Microsoft.OperationalInsights/dataCollectionRule/dataCollectionRule.bicep' `
                -dataCollectionRuleName '$(dataCollectionRuleName)' `
                -workspaceName '$(workspaceName)' `
                -Verbose

              #Fettching the DCR id and workspaceID
              try {
                $dcrID = (Get-AzDataCollectionRule -RuleName '$(dataCollectionRuleName)' -ResourceGroupName '$(workspaceResourceGroupName)' -WarningAction:SilentlyContinue).Id
                $workspaceID = (Get-AzOperationalInsightsWorkspace -ResourceGroupName '$(workspaceResourceGroupName)' -Name '$(workspaceName)' -WarningAction:SilentlyContinue).ResourceId
              }
              catch {
                Write-Information -InformationAction Continue  "Failed to fetch workspaceID and dcrID"
                throw
              }

              ##--- Creating payload body for dcr rule ---##
              $defaultDcrParams = @"
              {
                "properties": {
                    "defaultDataCollectionRuleResourceId": "$dcrID"
                }
              }
            "@

              ###-----Adding DCR to workspace------###
              try {  
                Invoke-AzRestMethod -Path "${workspaceID}?api-version=2021-12-01-preview" -Method PATCH -payload $defaultDcrParams
                Write-Information -InformationAction Continue  "DCR has been added to workspace."
              }
              catch {
                Write-Information -InformationAction Continue  "Failed while adding data collection rule"
                throw
              }


    - task: AzurePowerShell@5
      name: executingPesterTest
      displayName: 'Running Pester Scripts'
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        ScriptType: InlineScript
        Inline: | 
          $container = New-PesterContainer -Path $(Build.SourcesDirectory)/tests/pester.Tests.ps1  -Data @{ contosoSH360ClusterResourceGroupName = '$(resourceGroupName)'
          opsResourceGroupName = '$(workspaceResourceGroupName)'
          logAnalyticsWorkspaceName = '$(workspaceName)'
          monitoredClusterName = '$(aksName)'
          nonmonitoredClusterName = '$(NonMonitoredAKSName)'
          retentionPeriod = $(retentionPeriod)
          managedIdentityName = '$(managedIdentityName)'
          searchTableName = '$(searchTableName)'
          kubernetesVersion = '${{ parameters.clusterVersion }}'
          workspaceSkuName = '$(workspaceSkuName)'
          agentVMSize = '$(agentVMSize)'
          }
          Invoke-pester -Container $Container
        azurePowerShellVersion: LatestVersion 

    - task: AzureCLI@2
      displayName: 'Cluster role assignment'
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $cluster = az aks show -g '$(resourceGroupName)' -n '$(aksName)' --output json
          $clusterData = $cluster | ConvertFrom-Json
          az role assignment create --assignee-object-id "$(ContosoSH360ClusterSPObjectId)" --scope $clusterData.id --role "Monitoring Metrics Publisher"

- stage: ApplicationDeployment
  displayName: Application Deployment
  condition: and(${{ parameters.ApplicationDeployment }},  in(dependencies.BicepDeploy.result, 'Succeeded'))
  jobs:
  - job: Deploy
    displayName: Deploy Manifests to Container Monitoring
    pool: 
      vmImage:  windows-latest
    
    variables:
    - template: container-monitoring-variables.yml
    
    steps:
    - checkout: self
    - task: KubectlInstaller@0
      displayName: 'Install Kubectl latest'

    - task: Kubernetes@1
      displayName: 'kubectl apply invalidimage'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/invalidimage.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply ngnix-app'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/ngnix-app.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft-namespace'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/minecraft-namespace.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft3'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/minecraft3.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply minecraft3'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/ngnix-app.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply prometheus'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/prometheus.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply windows-service'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/windows-service.yaml'

    - task: Kubernetes@1
      displayName: 'kubectl apply prometheus-bundle'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: '$(resourceGroupName)'
        kubernetesCluster: '$(aksName)'
        command: apply
        arguments: '-f $(ContosoSH360ClusterFolder)/kubernetes-manifests/prometheus-bundle.yaml'

    - task: AzurePowerShell@5
      name: executingKubernetesServicePesterTest
      displayName: 'Running KubernetesService Pester Scripts'
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        ScriptType: InlineScript
        Inline: | 
          $container = New-PesterContainer -Path $(Build.SourcesDirectory)/tests/KubernetesService.Tests.ps1 -Data @{ contosoSH360ClusterResourceGroupName = '$(resourceGroupName)'
          monitoredClusterName = '$(aksName)'
          ContosoSH360ClusterSPObjectId = "$(ContosoSH360ClusterSPObjectId)"
          }
          Invoke-pester -Container $Container
        azurePowerShellVersion: LatestVersion 
